import React, { useContext, useState, useEffect } from "react";
import { AppContext } from "../context/AppContext";
import axios from "axios";
import { toast } from "react-toastify";
import { useNavigate } from "react-router-dom";

const MyAppointments = () => {
  const { backendUrl, token, getDoctorsData } = useContext(AppContext);
  const [appointments, setAppointments] = useState([]);

 const navigate = useNavigate();


  const months = [ "Jan", "Feb", "Mar", "Apr", "May", "Jun",
    "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];

    // Function to format the slot date
    const slotDateFormate = (slotDate) => {
      const dateArray = slotDate.split('_')
      return dateArray[0]+ " " + months[Number(dateArray[1])] + " " + dateArray[2];
    }

  const getUserAppointments = async () => {
    try {
      const { data } = await axios.get(backendUrl + "/api/user/appointments", {headers: { token },});
      if (data.success) {
        setAppointments(data.appointments.reverse());
        // console.log("Appointments fetched successfully:", data.appointments);
      }
    } catch (error) {
      console.error("Error fetching appointments:", error);
      toast.error("Failed to fetch appointments. Please try again later.");
    }
  };


  const cancelAppointment = async (appointmentId) => {
    try {
      console.log("Cancelling appointment with ID:", appointmentId);
      const { data } = await axios.post(
        backendUrl + "/api/user/cancel-appointment",
        { appointmentId },
        { headers: { token } }
      );
      if (data.success) {
        toast.success("Appointment cancelled successfully.");
        getUserAppointments();
        getDoctorsData();
        setAppointments((prev) =>
          prev.filter((item) => item._id !== appointmentId)
        );
      } else {
        toast.error(data.message || "Failed to cancel appointment.");
      }
    } catch (error) {
      console.error("Error cancelling appointment:", error);
      toast.error("Failed to cancel appointment. Please try again later.");
    }
  };


  const initPay = (order) => {

   const options = {
    key: import.meta.env.VITE_RAZORPAY_KEY_ID, // Your Razorpay key ID
    amount: order.amount, // Amount in paise
    currency: order.currency, // Currency code
    name: "Appointment Payment",
    description: "Appointment Payment",
    order_id: order.id, // Order ID generated by Razorpay
    reciept: order.receipt, // Receipt ID
    handler: async (response) => {
      console.log("Payment successful:", response);

      try{
    const {data} = await axios.post(backendUrl + "/api/user/varify-payment",response, {headers:{token}})

    if(data.success) {
        toast.success("Payment successful!");
        // Update appointment status or perform any other actions
        getUserAppointments();
        navigate("/my-appointments");
        // getDoctorsData();
      }
    }
      catch (error) {
        console.error("Error in payment handler:", error);
        toast.error("Payment verification failed. Please try again later.");
      }
    }
   }

const rzp = new window.Razorpay(options);
rzp.open();

  }

  const appointmentRazorpay = async (appointmentId) => {
    
    try {


       const {data} = await axios.post(backendUrl + "/api/user/payment-razorpay", { appointmentId }, { headers: { token } });
       if (data.success) {
       
        initPay(data.order);

       }





    }




catch (error) {
      console.error("Error in appointmentRazorpay:", error);
      toast.error("Payment failed. Please try again later.");
    }


  }
          


  useEffect(() => {
    if (token) {
      getUserAppointments();
    }
  }, [token]);

  return (
    <div className="min-h-screen bg-gray-50 px-4 py-15">
      <h1 className="text-3xl font-bold text-center text-blue-600 mb-8">
        My Appointments
      </h1>

      <div className="grid gap-6 max-w-5xl mx-auto">
        {appointments.map((item, index) => (
          <div
            key={index}
            className="bg-white shadow-lg rounded-xl p-6 flex flex-col md:flex-row gap-6 items-center"
          >
            {/* Doctor Image */}
            <div className="w-32 h-32 rounded-full overflow-hidden border border-blue-600 hover:bg-blue-600 transition duration-300">
              <img
                src={item.docData.image}
                alt={item.name}
                className="w-full h-full object-cover"
              />
            </div>

            {/* Doctor Info */}
            <div className="flex-1 text-center md:text-left space-y-2">
              <p className="text-xl font-semibold text-gray-800">{item.docData.name}</p>
              <p className="text-blue-600 font-medium">{item.docData.speciality}</p>
              <div className="text-gray-600">
                <p className="font-medium">Address:</p>
                <p>{item.docData.address}</p>
              </div>
              <p className="text-sm text-gray-500">
                <span className="font-medium text-gray-700">Date & Time:</span>&nbsp;
            {slotDateFormate(item.slotDate) } | {slotDateFormate(item.slotTime)}
              </p>
            </div>

            {/* Actions */}
            <div className="flex flex-col gap-2 md:items-end">
           {!item.cancelled && item.payment && <button className="bg-blue-500 text-white px-10 py-2 rounded-md hover:bg-green-600 transition"> Paid </button>}
           {!item.cancelled && !item.payment &&   <button onClick={() => appointmentRazorpay(item._id)} className="bg-green-500 text-white px-4 py-2 rounded-md hover:bg-green-600 transition"> Pay Online</button> }
           {!item.cancelled &&  <button onClick={()=> cancelAppointment(item._id)} className="bg-red-500 text-white px-4 py-2 rounded-md hover:bg-red-600 transition"> Cancel Appointment</button> } 
           {item.cancelled && (<p className="text-red-500 font-medium p-3 border border-red-500 rounded"> Appointment Cancelled </p>)}
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default MyAppointments;
